<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/@algolia/autocomplete-theme-classic@1.19.2/dist/theme.min.css"
  integrity="sha256-4Wtj6dqgMBT/Ji+vI49GON0NbfDlaJH06SUD7TH4yYg="
  crossorigin="anonymous"
/>
<script src="https://cdn.jsdelivr.net/npm/algoliasearch@5.30.0/dist/lite/builds/browser.umd.js" integrity="sha256-w/rbJ5CGTW5rub22bQ/VEoIHxypNh4NZPdkIJvGMZlI=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@4.79.0/dist/instantsearch.production.min.js" integrity="sha256-FOU2owonNoOmNxF4I8jLR4D8w/vziYNi64GUN2boXRQ=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/@algolia/autocomplete-js@1"></script>

{{#if page.component}}
  <script>
    (() => {
      const UI_TYPE = {
        ITEM: 0,
        HEADING: 1,
        SUBITEM: 2,
        LAST_SUBITEM: 3,
      };
      const getArticleSVG = (html) => html`
        <div class="aa-ItemIcon">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M14 2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H18C19.1 22 20 21.1 20 20V8L14 2Z" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M14 2V8H20" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M16 13H8" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <path d="M16 17H8" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <path d="M10 9H8" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </div>`

      const getMiddleSubitemSVG = (html) => html`
        <div class="aa-ItemIcon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="20" height="40">
            <line x1="50" y1="10" x2="50" y2="90" stroke="currentColor" stroke-width="6" stroke-linecap="round" />
            <line x1="50" y1="50" x2="85" y2="50" stroke="currentColor" stroke-width="6" stroke-linecap="round" />
          </svg>
        </div>
      `

      const getEndSubitemSVG = (html) => html`
        <div class="aa-ItemIcon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="20" height="20">
            <line x1="50" y1="10" x2="50" y2="70" stroke="currentColor" stroke-width="6" stroke-linecap="round" />
            <line x1="50" y1="70" x2="80" y2="70" stroke="currentColor" stroke-width="6" stroke-linecap="round" />
          </svg>
        </div>
      `

      const { autocomplete, getAlgoliaResults } = window['@algolia/autocomplete-js'];
      const { liteClient: algoliasearch } = window['algoliasearch/lite'];
      const ALL_VERSIONS_TITLE = 'All';
      const initialFacet = [{ title: ALL_VERSIONS_TITLE, versions: ['default'], latestVersion: 'default' }];
      let currentComponent = '{{page.component.title}}';
      if (currentComponent === 'Home') {
        currentComponent = ALL_VERSIONS_TITLE;
      }
      let currentVersion = '{{page.displayVersion}}';

      const componentVersions = [
        ...initialFacet,
        ...window.UTILS.parseHbsJsonString(
          '{{get-facets-from-components (sort-components site.components 'name' page.attributes.component-order) @root.page}}'
        )
      ];

      const getComponentOptions = (html) => componentVersions
        .map(({ title }) => title === currentComponent
          ? html`<option value="${title}" selected>${title}</option>`
          : html`<option value="${title}">${title}</option>`);

      const getComponentVersionOptions = (html) => componentVersions
        .find(({ title }) => title === currentComponent)?.versions
        .map(version => version === currentVersion
          ? html`<option value="${version}" selected>${version}</option>`
          : html`<option value="${version}">${version}</option>`);

      const getFacetFilters = () => {
        return currentComponent === ALL_VERSIONS_TITLE ? [] : [`componentVersion:${currentComponent}_${currentVersion}`];
      };

      function flatten(values) {
        return values.reduce((a, b) => {
          return a.concat(b);
        }, []);
      }

      function normalizeReshapeSources(sources) {
        return flatten(sources).filter(Boolean);
      }

      const groupBy = (predicate, options) => {
        return function runGroupBy(...rawSources) {
          const sources = normalizeReshapeSources(rawSources);

          if (sources.length === 0) {
            return [];
          }

          // Since we create multiple sources from a single one, we take the first one
          // as reference to create the new sources from.
          const referenceSource = sources[0];
          const items = flatten(sources.map((source) => source.getItems()));
          const groupedItems = items.reduce((acc, item) => {
            const key = predicate(item);

            if (!acc.hasOwnProperty(key)) {
              acc[key] = [];
            }

            acc[key].push(item);

            return acc;
          }, {});

          return Object.entries(groupedItems).map(([groupName, groupItems]) => {
            const userSource = options.getSource({
              name: groupName,
              items: groupItems,
            });

            return {
              ...referenceSource,
              sourceId: groupName,
              getItems() {
                return groupItems;
              },
              ...userSource,
              templates: {
                ...referenceSource.templates,
                ...userSource.templates,
              },
            };
          });
        };
      };

      const searchClient = algoliasearch('{{site.keys.docsearchId}}', '{{site.keys.docsearchApi}}');

      const groupByProduct = groupBy((hit) => hit.componentVersion.split('_')[0], {
        getSource({ name, items }) {
          return {
            getItems() {
              const sorted = items.sort((a, b) => `${a.title}${a.type}`.localeCompare(`${b.title}${b.type}`))
              let prevIndex = 0;
              const grouped = sorted.reduce((acc, next) => {
                // if is subitem
                if (acc.length > 0 && acc[prevIndex].title === next.title) {
                  // if is immediate subitem
                  if (acc[acc.length - 1].uiType === UI_TYPE.ITEM) {
                    acc[prevIndex].uiType = UI_TYPE.SUBITEM;
                    acc.splice(prevIndex, 0, { ...sorted[prevIndex], uiType: UI_TYPE.HEADING });
                    acc.push({ ...next, uiType: UI_TYPE.LAST_SUBITEM });
                  // if second or > subitem
                  } else {
                    acc[acc.length - 1].uiType = UI_TYPE.SUBITEM;
                    acc.push({ ...next, uiType: UI_TYPE.LAST_SUBITEM });
                  }
                } else {
                  acc.push({ ...next, uiType: UI_TYPE.ITEM });
                  prevIndex = acc.length - 1;
                }
                return acc;
              }, [])
              return grouped;
            },
            templates: {
              header({ html }) {
                return currentComponent === ALL_VERSIONS_TITLE ? html`
                <span class="aa-SourceHeaderTitle">${name}</span>
              ` : '';
              },
            },
          };
        },
      });

      const {
        refresh,
        setIsOpen,
      } = autocomplete({
        container: '#search-input',
        openOnFocus: true,
        defaultActiveItemId: 0,
        detachedMediaQuery: '',
        reshape({ sourcesBySourceId, state }) {
          console.log(state.query);
          const { algolia, ...rest } =
            sourcesBySourceId;
          const groupedSources = groupByProduct(algolia);
          // if there are no sources, return the default algolia source, to show the "No Results" template
          const resultingSources = groupedSources.length > 0 ? groupedSources : algolia;
          return [
            resultingSources,
            Object.values(rest),
          ];
        },
        getSources({ query }) {
          // @TODO: add to algolia config
          return query.length < 2 ? [] : [
            {
              sourceId: 'algolia',
              getItems() {
                return getAlgoliaResults({
                  searchClient,
                  queries: [
                    {
                      indexName: '{{site.keys.docsearchIndex}}',
                      params: {
                        query,
                        hitsPerPage: 10,
                        facetFilters: [getFacetFilters()],
                        attributesToSnippet: ['title:10', 'content:35'],
                        snippetEllipsisText: 'â€¦',
                      },
                    },
                  ],
                });
              },
              templates: {
                item({ item, components, html }) {
                  return html`
            <a class="aa-ItemLink" href="${item.uiType === UI_TYPE.HEADING ? item.url.split('#')[0] : item.url}" target="_self">
              <div class="aa-ItemWrapper">
                <div class="aa-ItemContent">
                  ${item.uiType === UI_TYPE.SUBITEM
                    ? getMiddleSubitemSVG(html)
                    : item.uiType === UI_TYPE.LAST_SUBITEM
                      ? getEndSubitemSVG(html) : getArticleSVG(html)}
                    <div class="aa-ItemContentBody">
                    ${item.uiType === UI_TYPE.HEADING || item.uiType === UI_TYPE.ITEM ? html`
                      <h4 class="aa-ItemContentTitle">
                        <span>${components.Highlight({ hit: item, attribute: 'title' })}</span>
                      </h4>
                    ` : ''}
                      ${item.uiType === UI_TYPE.HEADING || !item.section ? '' : html`
                        <h5 class="aa-ItemContentSection">
                            <span>${components.Highlight({hit: item, attribute: 'section'})}</span>
                        </h5>
                      `}
                      ${item.uiType === UI_TYPE.HEADING ? '' :
                        html`<p class="aa-ItemContentDescription">
                          ${components.Snippet({hit: item, attribute: 'content'})}
                        </p>`}
                      ${item.uiType === UI_TYPE.HEADING || item.uiType === UI_TYPE.ITEM ? html`
                        <div class="aa-ItemContentBreadcrumbs">
                          ${item.breadcrumbs ? item.breadcrumbs.join(' > ') : ''}
                        </div>
                      ` : ''}
                    </div>
                  </div>
                </div>
              </a>`;
                },
                noResults({ html }) {
                  return html`<p class="search-no-results">No results found.</p>`;
                },
              },
              getItemUrl({ item }) {
                return item.url;
              },
            },
          ];
        },
        render({ elements, render, html, ...rest }, root) {
          const dataSources = Object.values(elements);

          render(
            html`<div class="aa-PanelLayout aa-Panel--scrollable">
              <div class="aa-PanelSection aa-PanelSection--top">
                <div class="aa--ComponentversionPicker">
                  <div class="select">
                    <select id="componentSelect">
                      ${getComponentOptions(html)}
                    </select>
                    <span class="focus"></span>
                  </div>
                  ${getComponentVersionOptions(html).length > 1 ? html`<div class="select">
                    <select id="componentVersionSelect">
                      ${getComponentVersionOptions(html)}
                    </select>
                    <span class="focus"></span>
                  </div>` : ''}
                </div>
                ${ window.Kapa ? html`<button id="askAIBtn" class="aa-AskAIBtn">
                    <span class="aa-AskAIBtnIcon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="30" height="30">
                          <line x1="20" y1="10" x2="20" y2="90" stroke="currentColor" stroke-width="15" stroke-linecap="round"/>
                          <line x1="80" y1="10" x2="80" y2="90" stroke="currentColor" stroke-width="15" stroke-linecap="round"/>
                          <line x1="20" y1="50" x2="80" y2="50" stroke="currentColor" stroke-width="15" stroke-linecap="round"/>
                        </svg>
                    </span>
                    <p class="aa-AskAISection">Can't find what you're looking for?</p>
                  <strong class="aa-AskAIHeading">Ask AI</strong>
                </button>` : ''}
              </div>
              <div class="aa-PanelSection aa-PanelSection--bottom">
                ${dataSources}
              </div>
            </div>`,
            root
          );
        },
      });

      document.addEventListener('mousedown', (event) => {
        if (event.target.id === 'componentSelect' || event.target.id === 'componentVersionSelect') {
          event.stopImmediatePropagation();
        } else if (event.target.id === 'askAIBtn') {
          event.preventDefault();
          window.Kapa.open({ query: document.querySelector('input.aa-Input').value });
          setIsOpen(false);
        }
      }, true);

      document.addEventListener('change', (event) => {
        if (event.target.id === 'componentSelect') {
          currentComponent = event.target.value;
          currentVersion = componentVersions.find(({ title }) => title === currentComponent).latestVersion;
          refresh();
        } else if (event.target.id === 'componentVersionSelect') {
          currentVersion = event.target.value;
          refresh();
        }
      });
    })()
  </script>
{{/if}}
