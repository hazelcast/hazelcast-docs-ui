<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/@algolia/autocomplete-theme-classic@1.19.2/dist/theme.min.css"
  integrity="sha256-4Wtj6dqgMBT/Ji+vI49GON0NbfDlaJH06SUD7TH4yYg="
  crossorigin="anonymous"
/>
<script src="https://cdn.jsdelivr.net/npm/algoliasearch@5.30.0/dist/lite/builds/browser.umd.js" integrity="sha256-w/rbJ5CGTW5rub22bQ/VEoIHxypNh4NZPdkIJvGMZlI=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@4.79.0/dist/instantsearch.production.min.js" integrity="sha256-FOU2owonNoOmNxF4I8jLR4D8w/vziYNi64GUN2boXRQ=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/@algolia/autocomplete-js@1"></script>

{{#if page.component}}
  <script>
    (() => {
      const { autocomplete, getAlgoliaResults } = window['@algolia/autocomplete-js'];
      const { liteClient: algoliasearch } = window['algoliasearch/lite'];

      const selectedFacets = window.UTILS.parseHbsJsonString(
        '{{get-facets-from-components (sort-components site.components 'name' page.attributes.component-order) @root.page}}'
      );

      const getFacetFilters = () => {
        return Object.keys(selectedFacets)
          .reduce((acc, product) => {
            const facets = Object.keys(selectedFacets[product])
              .filter(version => selectedFacets[product][version])
              .map((version) => `componentVersion:${product}_${version}`);
            acc.push(...facets);
            return acc;
          }, []);
      };

      function flatten(values) {
        return values.reduce((a, b) => {
          return a.concat(b);
        }, []);
      }

      function normalizeReshapeSources(sources) {
        return flatten(sources).filter(Boolean);
      }

      const groupBy = (predicate, options) => {
        return function runGroupBy(...rawSources) {
          const sources = normalizeReshapeSources(rawSources);

          if (sources.length === 0) {
            return [];
          }

          // Since we create multiple sources from a single one, we take the first one
          // as reference to create the new sources from.
          const referenceSource = sources[0];
          const items = flatten(sources.map((source) => source.getItems()));
          const groupedItems = items.reduce((acc, item) => {
            const key = predicate(item);

            if (!acc.hasOwnProperty(key)) {
              acc[key] = [];
            }

            acc[key].push(item);

            return acc;
          }, {});

          return Object.entries(groupedItems).map(([groupName, groupItems]) => {
            const userSource = options.getSource({
              name: groupName,
              items: groupItems,
            });

            return {
              ...referenceSource,
              sourceId: groupName,
              getItems() {
                return groupItems;
              },
              ...userSource,
              templates: {
                ...referenceSource.templates,
                ...userSource.templates,
              },
            };
          });
        };
      };

      const searchClient = algoliasearch('{{site.keys.docsearchId}}', '{{site.keys.docsearchApi}}');

      const groupByProduct = groupBy((hit) => hit.componentVersion.split('_')[0], {
        getSource({ name, items }) {
          return {
            getItems() {
              const sorted = items.sort((a, b) => `${a.title}${a.type}${a.section}`.localeCompare(`${b.title}${b.type}${b.section}`))
              let prev = null;
              const grouped = sorted.reduce((acc, next) => {
                if (prev?.title === next.title) {
                  const { subItems, ...rest } = prev;
                  prev.subItems = subItems || [{
                    ...rest,
                  }];
                  prev.subItems.push(next);
                } else {
                  acc.push(next);
                  prev = next;
                }
                return acc;
              }, [])
              return grouped;
            },
            templates: {
              header({ html }) {
                return html`
                <span class="aa-SourceHeaderTitle">${name}</span>
                <div class="aa-SourceHeaderLine" />
              `
                  ;
              },
            },
          };
        },
      });

      const {
        refresh,
        setIsOpen,
      } = autocomplete({
        container: '#search-input',
        placeholder: '',
        defaultActiveItemId: 0,
        detachedMediaQuery: '',
        reshape({ sourcesBySourceId }) {
          const { algolia, ...rest } =
            sourcesBySourceId;
          const groupedSources = groupByProduct(algolia);
          // if there are no sources, return the default algolia source, to show the "No Results" template
          const resultingSources = groupedSources.length > 0 ? groupedSources : algolia;
          return [
            resultingSources,
            Object.values(rest),
          ];
        },
        getSources({ query }) {
          return [
            {
              sourceId: 'algolia',
              getItems() {
                return getAlgoliaResults({
                  searchClient,
                  queries: [
                    {
                      indexName: '{{site.keys.docsearchIndex}}',
                      params: {
                        query,
                        hitsPerPage: 5,
                        facetFilters: [getFacetFilters()],
                        attributesToSnippet: ['title:10', 'content:35'],
                        snippetEllipsisText: 'â€¦',
                      },
                    },
                  ],
                });
              },
              templates: {
                item({ item, components, html }) {
                  return html`
              <div class="aa-ItemWrapper">
                <div class="aa-ItemContent">
<!--                  <div class="aa-ItemIcon">-->
<!--                    <svg xmlns="http://www.w3.org/2000/svg"  width="100" height="100"-->
<!--                         viewBox="0 0 100 100" xml:space="preserve">-->
<!--                      <g>-->
<!--                        <g>-->
<!--                          <path d="M32,59h13c1.1,0,2-0.9,2-2V27c0-2.2-2-4-4-4H32.3C31,23,30,24,30,25.3V55v2C30,58.1,30.9,59,32,59z"/>-->
<!--                        </g>-->
<!--                        <g>-->
<!--                          <path d="M76,29v32c0,2.2-1.8,4-4,4H28c-2.2,0-4-1.8-4-4V29c-3.3,0-6,2.7-6,6v30c0,3.3,2.7,6,6,6h19c1.1,0,2,0.9,2,2v0-->
<!--                            c0,1.1,0.9,2,2,2h6c1.1,0,2-0.9,2-2v0c0-1.1,0.9-2,2-2h19c3.3,0,6-2.7,6-6V35C82,31.7,79.3,29,76,29z"/>-->
<!--                        </g>-->
<!--                        <g>-->
<!--                          <path d="M55,59h12.7c1.3,0,2.3-1,2.3-2.3V55V25c0-1.1-0.9-2-2-2H57c-2,0-4,1.8-4,4v30C53,58.1,53.9,59,55,59z"/>-->
<!--                        </g>-->
<!--                      </g>-->
<!--                    </svg>-->
<!--                  </div>-->
                  <a class="aa-ItemLink" href="${item.url}" target="_self">
                    <div class="aa-ItemContentBody">
                      <h4 class="aa-ItemContentTitle">
                        <span>${components.Highlight({ hit: item, attribute: 'title' })}</span>
                        ${item.section && !item.subItems ? html`<span>${components.Highlight({hit: item, attribute: 'section'})}</span>` : ''}
                      </h4>
                      ${item.subItems ?
                        html`<ul class="aa-ItemPageGroup">
                            ${item.subItems.map((subItem) => html`<a class="aa-ItemLink" href="${subItem.url}" target="_self" key="${subItem.url}">
                                <li class="aa-ItemPageGroupItem">
                                  <h5 class="aa-ItemContentTitle">${components.Highlight({ hit: subItem, attribute: 'section' })}</h5>
                                  <p class="aa-ItemContentDescription">
                                    ${components.Snippet({hit: subItem, attribute: 'content'})}
                                  </p>
                                </li>
                            </a>`)}
                        </ul>` :
                        html`<p class="aa-ItemContentDescription">
                          ${components.Snippet({hit: item, attribute: 'content'})}
                        </p>`}
                      <div class="aa-ItemContentBreadcrumbs">
                        ${item.breadcrumbs ? item.breadcrumbs.join(' > ') : ''}
                      </div>
                    </div>
                  </a>
                </div>
              </div>`;
                },
                noResults({ html }) {
                  return html`<p class="search-no-results">No results found.</p>`;
                },
              },
              getItemUrl({ item }) {
                return item.url;
              },
            },
          ];
        },
        render({ elements, render, html, ...rest }, root) {
          const dataSources = Object.values(elements);

          render(
            html`<div class="aa-PanelLayout aa-Panel--scrollable">
              ${ window.Kapa ? html`<p class="aa-AskAISection">Can't find what you're looking for? Click <button id="askAIBtn" class="aa-AskAIBtn">here</button> to <strong>Ask AI</strong></p>` : ''}
        <div class="aa-PanelSections">
          <div class="aa-PanelSection aa-PanelSection--left">
            ${Object.keys(selectedFacets).length > 0 ? html`
                <div class="facet-filters">
                  ${Object.keys(selectedFacets).map(product =>
              html`<h4 class="capitalize">${product}</h4>
                   <ul>
                     ${Object.keys(selectedFacets[product]).map(version => {
                const isChecked = selectedFacets[product] && selectedFacets[product][version] === true;
                return html`<li>
                           <label>
                             ${isChecked ? html`<input
                               type="checkbox"
                               name="${product}"
                               id="${version}"
                               data-facet-product="${product}"
                               data-facet-version="${version}"
                               checked
                             />` : html`<input
                               type="checkbox"
                               name="${product}"
                               id="${version}"
                               data-facet-product="${product}"
                               data-facet-version="${version}"
                             />`}
                             ${version}
                           </label>
                         </li>`;
              })}
                   </ul>`
            )}
                </div>
              ` : html``}
          </div>
          <div class="aa-PanelSection aa-PanelSection--right">
            ${dataSources}
          </div>
        </div>
      </div>`,
            root
          );
        },
      });

      document.addEventListener('change', function(event) {
        if (event.target.type === 'checkbox' && event.target.dataset.facetProduct) {
          const facetProduct = event.target.dataset.facetProduct;
          const facetVersion = event.target.dataset.facetVersion;

          selectedFacets[facetProduct][facetVersion] = event.target.checked;

          if (refresh) {
            refresh();
          }
        }
      });


        document.addEventListener('click', (event) => {
          if (event.target.id === 'askAIBtn') {
            event.preventDefault();
            window.Kapa.open({ query: document.querySelector('input.aa-Input').value });
            setIsOpen(false);
          }
        });
    })()
  </script>
{{/if}}
